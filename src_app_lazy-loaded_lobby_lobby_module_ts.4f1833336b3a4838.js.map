{"version":3,"file":"src_app_lazy-loaded_lobby_lobby_module_ts.4f1833336b3a4838.js","mappings":"4TAIIA,cACEA,SACFA,4CAFoDA,sCAClDA,4JCAN,MAAMC,EAAiB,CACrB,CAACC,KAAM,MAAOC,UCOW,MAArB,MAAOC,EASXC,YACUC,EACAC,EACAC,EACAC,EACsBC,GAJtBC,mBACAA,yBACAA,uBACAA,yBACsBA,gBAThCA,gBAAY,EACZA,aAAS,CASL,CAEEC,WAAQ,qCACZC,EAAKC,OAASD,EAAKN,kBAAkBQ,YACrCF,EAAKG,OAASH,EAAKN,kBAAkBU,YACrCJ,EAAKK,iBAAmBL,EAAKP,YAAYa,MACzCN,EAAKP,YAAYc,qBAEjBP,EAAKQ,KAAO,CACVR,EAAKP,YAAYgB,WAAWC,UAAUC,GAAKX,EAAKY,aAElDZ,EAAKa,KAAO,SAA2B,IAAhBC,KAAKC,UAAiBC,QAAQ,GAAGC,SAAS,EAAG,KACpEjB,EAAKkB,QAAQ,KAAM,EAVP,EAWd,CAEQN,WACNd,KAAKF,kBAAkBgB,UACzB,CAEAO,cACErB,KAAKU,KAAKY,QAAQT,GAAKA,EAAEU,YAC3B,CAEAH,QAAQI,GACNxB,KAAKL,YAAY8B,aAAazB,KAAKe,KACrC,CAEAW,YACE1B,KAAKH,gBAAgB6B,WACvB,CAEAC,SACE3B,KAAK4B,WAAY,EACjBC,WAAW,IAAM7B,KAAK4B,WAAY,EAAO,KACzC5B,KAAK8B,2BAA0B,EACjC,CAEAC,kBACE/B,KAAK8B,2BAA0B,EACjC,CAEAE,eACEC,UAAUC,UAAUC,UAAUC,OAAOC,SAASC,MAC9CtC,KAAKuC,QAAS,EACdV,WAAW,IAAM7B,KAAKuC,QAAS,EAAO,IACxC,CAEQT,0BAA0BU,GAChCxC,KAAKL,YAAY8C,sBAAsBD,YAAcA,EACrDxC,KAAKL,YAAY+C,wBAAwB1C,KAAKL,YAAY8C,uBACtDzC,KAAKO,iBAAiBoC,QAAQ3C,KAAKc,UACzC,+CAlEWrB,GAAcmD,kDAcfC,MAAa,0BAdZpD,EAAcqD,6gBFb3BzD,iBACEA,iBACAA,aAAGA,SAAyFA,QAC5FA,cACEA,sBAGFA,QACAA,iBAAsB,aACbA,oDAAkB,mCAAkB0D,YAAe,GAA1D1D,QACAA,oBAKEA,iCAAS0D,YAAe,GAEvB1D,oBAAQA,UAGbA,qBAIEA,gCAAS0D,gBAAc,GAEtB1D,UAAyCA,QAE5CA,qBAIEA,gCAAS0D,UAAQ,GAElB1D,mBAAMA,QACPA,qBAGEA,gCAAS0D,mBAAiB,GAG3B1D,qBAAQA,QACTA,qBAIEA,gCAAS0D,aAAW,GACrB1D,uBAAUA,iBA9C8BA,+DACtCA,gHAEsBA,qDAKhBA,iCAOLA,uFASFA,oCACCA,oDAODA,6EAMAA,6EAMAA,qkBEhCSI,CAAc,MDNzB,CAACF,KAAM,KAAMyD,WAAYC,WAOpB,IAAMC,EAAkB,MAAzB,MAAOA,kDAAkB,0BAAlBA,gCAHDC,cAAsB7D,GACtB6D,QAECD,CAAkB,KEMlBE,EAAW,MAAlB,MAAOA,kDAAW,0BAAXA,gCANTC,KACAH,EACAI,KACAC,QAGSH,CAAW","names":["i0","routes","path","component","LobbyComponent","constructor","gameService","peerToPeerService","gameHostService","navigationService","baseHref","this","ngOnInit","_this","isHost","getIsHost","hostId","getHostId","gameServiceState","state","initFromPeerToPeer","subs","gameStart$","subscribe","t","gotoGame","name","Math","random","toFixed","padStart","setName","ngOnDestroy","forEach","unsubscribe","event","updatePlayer","startGame","rejoin","rejoining","setTimeout","setIsSpectatorAndGotoGame","joinAsSpectator","copyJoinLink","navigator","clipboard","writeText","window","location","href","copied","isSpectator","getOrCreateMyPlayer","sendPlayerUpdateMessage","inGame","core","APP_BASE_HREF","selectors","ctx","redirectTo","RouteNames","LobbyRoutingModule","RouterModule","LobbyModule","CommonModule","FormsModule","MatButtonModule"],"sourceRoot":"webpack:///","sources":["./src/app/pages/lobby/lobby.component.html","./src/app/lazy-loaded/lobby/lobby-routing.module.ts","./src/app/pages/lobby/lobby.component.ts","./src/app/lazy-loaded/lobby/lobby.module.ts"],"sourcesContent":["<div class=\"container\">\n  <img class=\"banana-img mat-elevation-z2\" src=\"{{baseHref}}assets/banana.jpeg\">\n  <p>{{gameServiceState.players.length}} players. {{gameServiceState.totalPeerCount}} in room.</p>\n  <ul>\n    <li *ngFor=\"let player of gameServiceState.players\" [class.strikethrough]=\"player.disconnected\">\n      {{player.name}}{{player.id === hostId ? '(host)' : ''}}{{player.id === gameServiceState.myPlayer?.id ? '(you)' : ''}}\n    </li>\n  </ul>\n  <div class=\"name-div\">\n    <input [(ngModel)]=\"name\" (keydown.enter)=\"setName($event)\" type=\"text\" maxlength=\"32\">\n    <button\n      mat-stroked-button\n      color=\"primary\"\n      style=\"display: inline-block;\"\n      class=\"big-button\"\n      (click)=\"setName($event)\"\n      [disabled]=\"!name || gameServiceState.totalPeerCount === 0 || rejoining\"\n      >Set name</button>\n  </div>\n\n  <button\n    mat-stroked-button\n    class=\"block-button\"\n    color=\"primary\"\n    (click)=\"copyJoinLink()\"\n    [disabled]=\"copied\"\n    >{{copied ? 'Copied!' : 'Copy join link'}}</button>\n\n  <button\n    mat-stroked-button\n    class=\"block-button\"\n    color=\"primary\"\n    (click)=\"rejoin()\"\n    [disabled] = \"isHost || rejoining || !gameServiceState.inGame\"\n  >Rejoin</button>\n  <button\n    mat-stroked-button\n    class=\"block-button\"\n    (click)=\"joinAsSpectator()\"\n    [disabled] = \"isHost || rejoining || !gameServiceState.inGame\"\n    color=\"primary\"\n  >Spectate</button>\n  <button\n    mat-raised-button\n    class=\"block-button\"\n    [disabled]=\"!isHost || gameServiceState.myPlayer === null\"\n    (click)=\"startGame()\"\n  >Start game</button>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { RouteNames } from 'src/app/pages/routes';\nimport { LobbyComponent } from '../../pages/lobby/lobby.component';\n\nconst routes: Routes = [\n  {path: ':id', component: LobbyComponent},\n  {path: '**', redirectTo: RouteNames.HOME}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LobbyRoutingModule { }\n","import { APP_BASE_HREF } from '@angular/common';\nimport { Component, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GameHostService } from 'src/app/services/game-host.service';\nimport { GameService, GameServiceState } from 'src/app/services/game.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { PeerToPeerService } from 'src/app/services/peer-to-peer.service';\n\n@Component({\n  selector: 'app-lobby',\n  templateUrl: './lobby.component.html',\n  styleUrls: ['./lobby.component.scss']\n})\nexport class LobbyComponent implements OnInit, OnDestroy {\n  gameServiceState: GameServiceState;\n  name: string;\n  isHost: boolean;\n  subs: Subscription[];\n  rejoining = false;\n  copied = false;\n  hostId: string;\n\n  constructor(\n    private gameService: GameService,\n    private peerToPeerService: PeerToPeerService,\n    private gameHostService: GameHostService,\n    private navigationService: NavigationService,\n    @Inject(APP_BASE_HREF) public baseHref: string\n  ) { }\n\n  async ngOnInit() {\n    this.isHost = this.peerToPeerService.getIsHost();\n    this.hostId = this.peerToPeerService.getHostId();\n    this.gameServiceState = this.gameService.state;\n    this.gameService.initFromPeerToPeer();\n    \n    this.subs = [\n      this.gameService.gameStart$.subscribe(t => this.gotoGame()),\n    ];\n    this.name = 'guest' + (Math.random() * 1000).toFixed(0).padStart(4, '0');\n    this.setName(null);\n  }\n\n  private gotoGame() {\n    this.navigationService.gotoGame();\n  }\n\n  ngOnDestroy() {\n    this.subs.forEach(t => t.unsubscribe);\n  }\n\n  setName(event: Event) {\n    this.gameService.updatePlayer(this.name);\n  }\n\n  startGame() {\n    this.gameHostService.startGame();\n  }\n\n  rejoin() {\n    this.rejoining = true;\n    setTimeout(() => this.rejoining = false, 500);\n    this.setIsSpectatorAndGotoGame(false);\n  }\n\n  joinAsSpectator() {\n    this.setIsSpectatorAndGotoGame(true);\n  }\n\n  copyJoinLink() {\n    navigator.clipboard.writeText(window.location.href);\n    this.copied = true;\n    setTimeout(() => this.copied = false, 2 * 1000);\n  }\n\n  private setIsSpectatorAndGotoGame(isSpectator: boolean) {\n    this.gameService.getOrCreateMyPlayer().isSpectator = isSpectator;\n    this.gameService.sendPlayerUpdateMessage(this.gameService.getOrCreateMyPlayer());\n    if (this.gameServiceState.inGame) this.gotoGame();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LobbyRoutingModule } from './lobby-routing.module';\nimport { LobbyComponent } from '../../pages/lobby/lobby.component';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\n\n\n@NgModule({\n  declarations: [\n    LobbyComponent\n  ],\n  imports: [\n    CommonModule,\n    LobbyRoutingModule,\n    FormsModule,\n    MatButtonModule\n  ]\n})\nexport class LobbyModule { }\n"],"x_google_ignoreList":[]}