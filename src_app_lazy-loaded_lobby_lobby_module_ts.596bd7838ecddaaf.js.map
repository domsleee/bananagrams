{"version":3,"file":"src_app_lazy-loaded_lobby_lobby_module_ts.596bd7838ecddaaf.js","mappings":"6MASO,IAAMA,EAAgB,MAAvB,MAAOA,EACXC,YAAoBC,EACAC,GADAC,yBACAA,aAGpB,CAEAC,YACEC,EACAC,GAEA,QAAMH,KAAKF,kBAAkBM,kBAEvBJ,KAAKD,OAAOM,SADTH,EAAMI,OAAOC,GACK,CAAC,GAAGC,YAAmBN,EAAMI,OAAOC,MACpC,CAACC,UAG9B,+CAjBWZ,GAAgBa,mDAAhBb,EAAgBc,QAAhBd,EAAgB,qBAFf,SAEDA,CAAgB,0MCLzBe,cACEA,SACFA,4CAFoDA,sCAClDA,4JCCC,MAAMC,EAAiB,CAC5B,CAACC,KAAM,MAAOC,UCMW,MAArB,MAAOC,EASXlB,YACUmB,EACAlB,EACAmB,EACAC,EACsBC,GAJtBnB,mBACAA,yBACAA,uBACAA,yBACsBA,gBAThCA,gBAAY,EACZA,aAAS,CASL,CAEEoB,WAAQ,qCACZC,EAAKC,OAASD,EAAKvB,kBAAkByB,YACrCF,EAAKG,OAASH,EAAKvB,kBAAkB2B,YACrCJ,EAAKK,iBAAmBL,EAAKL,YAAYb,MACzCkB,EAAKL,YAAYW,qBAEjBN,EAAKO,KAAO,CACVP,EAAKL,YAAYa,WAAWC,UAAUC,GAAKV,EAAKW,aAElDX,EAAKY,KAAO,SAA2B,IAAhBC,KAAKC,UAAiBC,QAAQ,GAAGC,SAAS,EAAG,KACpEhB,EAAKiB,QAAQ,KAAM,EAVP,EAWd,CAEQN,WACNhC,KAAKkB,kBAAkBc,UACzB,CAEAO,cACEvC,KAAK4B,KAAKY,QAAQT,GAAKA,EAAEU,YAC3B,CAEAH,QAAQI,GACN1C,KAAKgB,YAAY2B,aAAa3C,KAAKiC,KACrC,CAEAW,YACE5C,KAAKiB,gBAAgB2B,WACvB,CAEAC,SACE7C,KAAK8C,WAAY,EACjBC,WAAW,IAAM/C,KAAK8C,WAAY,EAAO,KACzC9C,KAAKgD,2BAA0B,EACjC,CAEAC,kBACEjD,KAAKgD,2BAA0B,EACjC,CAEAE,eACEC,UAAUC,UAAUC,UAAUC,OAAOC,SAASC,MAC9CxD,KAAKyD,QAAS,EACdV,WAAW,IAAM/C,KAAKyD,QAAS,EAAO,IACxC,CAEQT,0BAA0BU,GAChC1D,KAAKgB,YAAY2C,sBAAsBD,YAAcA,EACrD1D,KAAKgB,YAAY4C,wBAAwB5D,KAAKgB,YAAY2C,uBACtD3D,KAAK0B,iBAAiBmC,QAAQ7D,KAAKgC,UACzC,+CAlEWjB,GAAc+C,kDAcfC,MAAa,0BAdZhD,EAAciD,6gBFb3BrD,iBACEA,iBACAA,aAAGA,SAAyFA,QAC5FA,cACEA,sBAGFA,QACAA,iBAAsB,aACbA,oDAAkB,mCAAkBsD,YAAe,GAA1DtD,QACAA,oBAKEA,iCAASsD,YAAe,GAEvBtD,oBAAQA,UAGbA,qBAIEA,gCAASsD,gBAAc,GAEtBtD,UAAyCA,QAE5CA,qBAIEA,gCAASsD,UAAQ,GAElBtD,mBAAMA,QACPA,qBAGEA,gCAASsD,mBAAiB,GAG3BtD,qBAAQA,QACTA,qBAIEA,gCAASsD,aAAW,GACrBtD,uBAAUA,iBA9C8BA,+DACtCA,gHAEsBA,qDAKhBA,iCAOLA,uFASFA,oCACCA,oDAODA,6EAMAA,6EAMAA,qkBEhCSI,CAAc,KDNgBd,YAAa,CAACL,MACvD,CAACiB,KAAM,KAAMqD,WAAY1D,WAOpB,IAAM2D,EAAkB,MAAzB,MAAOA,kDAAkB,0BAAlBA,gCAHDC,cAAsBxD,GACtBwD,QAECD,CAAkB,KEKlBE,EAAW,MAAlB,MAAOA,kDAAW,0BAAXA,gCANTC,KACAH,EACAI,KACAC,QAGSH,CAAW","names":["IsConnectedGuard","constructor","peerToPeerService","router","this","canActivate","route","state","getIsConnected","navigate","params","id","RouteNames","_angular_core__WEBPACK_IMPORTED_MODULE_2__","factory","i0","routes","path","component","LobbyComponent","gameService","gameHostService","navigationService","baseHref","ngOnInit","_this","isHost","getIsHost","hostId","getHostId","gameServiceState","initFromPeerToPeer","subs","gameStart$","subscribe","t","gotoGame","name","Math","random","toFixed","padStart","setName","ngOnDestroy","forEach","unsubscribe","event","updatePlayer","startGame","rejoin","rejoining","setTimeout","setIsSpectatorAndGotoGame","joinAsSpectator","copyJoinLink","navigator","clipboard","writeText","window","location","href","copied","isSpectator","getOrCreateMyPlayer","sendPlayerUpdateMessage","inGame","core","APP_BASE_HREF","selectors","ctx","redirectTo","LobbyRoutingModule","RouterModule","LobbyModule","CommonModule","FormsModule","MatButtonModule"],"sourceRoot":"webpack:///","sources":["./src/app/guards/is-connected.guard.ts","./src/app/pages/lobby/lobby.component.html","./src/app/lazy-loaded/lobby/lobby-routing.module.ts","./src/app/pages/lobby/lobby.component.ts","./src/app/lazy-loaded/lobby/lobby.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RouteNames } from '../pages/routes';\nimport { PeerToPeerService } from '../services/peer-to-peer.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IsConnectedGuard implements CanActivate {\n  constructor(private peerToPeerService: PeerToPeerService,\n              private router: Router)\n  {\n\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree\n  {\n    if (!(this.peerToPeerService.getIsConnected())) {\n      return route.params.id\n        ? this.router.navigate([`${RouteNames.JOIN}/${route.params.id}`])\n        : this.router.navigate([RouteNames.HOME]);\n    }\n    return true;\n  }\n}\n","<div class=\"container\">\n  <img class=\"banana-img mat-elevation-z2\" src=\"{{baseHref}}assets/banana.jpeg\">\n  <p>{{gameServiceState.players.length}} players. {{gameServiceState.totalPeerCount}} in room.</p>\n  <ul>\n    <li *ngFor=\"let player of gameServiceState.players\" [class.strikethrough]=\"player.disconnected\">\n      {{player.name}}{{player.id === hostId ? '(host)' : ''}}{{player.id === gameServiceState.myPlayer?.id ? '(you)' : ''}}\n    </li>\n  </ul>\n  <div class=\"name-div\">\n    <input [(ngModel)]=\"name\" (keydown.enter)=\"setName($event)\" type=\"text\" maxlength=\"32\">\n    <button\n      mat-stroked-button\n      color=\"primary\"\n      style=\"display: inline-block;\"\n      class=\"big-button\"\n      (click)=\"setName($event)\"\n      [disabled]=\"!name || gameServiceState.totalPeerCount === 0 || rejoining\"\n      >Set name</button>\n  </div>\n\n  <button\n    mat-stroked-button\n    class=\"block-button\"\n    color=\"primary\"\n    (click)=\"copyJoinLink()\"\n    [disabled]=\"copied\"\n    >{{copied ? 'Copied!' : 'Copy join link'}}</button>\n\n  <button\n    mat-stroked-button\n    class=\"block-button\"\n    color=\"primary\"\n    (click)=\"rejoin()\"\n    [disabled] = \"isHost || rejoining || !gameServiceState.inGame\"\n  >Rejoin</button>\n  <button\n    mat-stroked-button\n    class=\"block-button\"\n    (click)=\"joinAsSpectator()\"\n    [disabled] = \"isHost || rejoining || !gameServiceState.inGame\"\n    color=\"primary\"\n  >Spectate</button>\n  <button\n    mat-raised-button\n    class=\"block-button\"\n    [disabled]=\"!isHost || gameServiceState.myPlayer === null\"\n    (click)=\"startGame()\"\n  >Start game</button>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { IsConnectedGuard } from 'src/app/guards/is-connected.guard';\nimport { RouteNames } from 'src/app/pages/routes';\nimport { LobbyComponent } from '../../pages/lobby/lobby.component';\n\nexport const routes: Routes = [\n  {path: ':id', component: LobbyComponent, canActivate: [IsConnectedGuard]},\n  {path: '**', redirectTo: RouteNames.HOME}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LobbyRoutingModule { }\n","import { APP_BASE_HREF } from '@angular/common';\nimport { Component, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GameHostService } from 'src/app/services/game-host.service';\nimport { GameService, GameServiceState } from 'src/app/services/game.service';\nimport { NavigationService } from 'src/app/services/navigation.service';\nimport { PeerToPeerService } from 'src/app/services/peer-to-peer.service';\n\n@Component({\n  selector: 'app-lobby',\n  templateUrl: './lobby.component.html',\n  styleUrls: ['./lobby.component.scss']\n})\nexport class LobbyComponent implements OnInit, OnDestroy {\n  gameServiceState: GameServiceState;\n  name: string;\n  isHost: boolean;\n  subs: Subscription[];\n  rejoining = false;\n  copied = false;\n  hostId: string;\n\n  constructor(\n    private gameService: GameService,\n    private peerToPeerService: PeerToPeerService,\n    private gameHostService: GameHostService,\n    private navigationService: NavigationService,\n    @Inject(APP_BASE_HREF) public baseHref: string\n  ) { }\n\n  async ngOnInit() {\n    this.isHost = this.peerToPeerService.getIsHost();\n    this.hostId = this.peerToPeerService.getHostId();\n    this.gameServiceState = this.gameService.state;\n    this.gameService.initFromPeerToPeer();\n    \n    this.subs = [\n      this.gameService.gameStart$.subscribe(t => this.gotoGame()),\n    ];\n    this.name = 'guest' + (Math.random() * 1000).toFixed(0).padStart(4, '0');\n    this.setName(null);\n  }\n\n  private gotoGame() {\n    this.navigationService.gotoGame();\n  }\n\n  ngOnDestroy() {\n    this.subs.forEach(t => t.unsubscribe);\n  }\n\n  setName(event: Event) {\n    this.gameService.updatePlayer(this.name);\n  }\n\n  startGame() {\n    this.gameHostService.startGame();\n  }\n\n  rejoin() {\n    this.rejoining = true;\n    setTimeout(() => this.rejoining = false, 500);\n    this.setIsSpectatorAndGotoGame(false);\n  }\n\n  joinAsSpectator() {\n    this.setIsSpectatorAndGotoGame(true);\n  }\n\n  copyJoinLink() {\n    navigator.clipboard.writeText(window.location.href);\n    this.copied = true;\n    setTimeout(() => this.copied = false, 2 * 1000);\n  }\n\n  private setIsSpectatorAndGotoGame(isSpectator: boolean) {\n    this.gameService.getOrCreateMyPlayer().isSpectator = isSpectator;\n    this.gameService.sendPlayerUpdateMessage(this.gameService.getOrCreateMyPlayer());\n    if (this.gameServiceState.inGame) this.gotoGame();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LobbyRoutingModule } from './lobby-routing.module';\nimport { LobbyComponent } from '../../pages/lobby/lobby.component';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\n\n\n@NgModule({\n  declarations: [\n    LobbyComponent\n  ],\n  imports: [\n    CommonModule,\n    LobbyRoutingModule,\n    FormsModule,\n    MatButtonModule\n  ]\n})\nexport class LobbyModule { }\n"],"x_google_ignoreList":[]}